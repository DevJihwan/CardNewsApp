import Foundation

// Claude API ÏÑúÎπÑÏä§ - AI ÏöîÏïΩ Î∞è Ïπ¥ÎìúÎâ¥Ïä§ ÏÉùÏÑ± Îã¥Îãπ
@MainActor
class ClaudeAPIService: ObservableObject {
    
    // MARK: - Properties
    
    private let session = URLSession.shared
    private let decoder = JSONDecoder()
    private let encoder = JSONEncoder()
    
    // API ÌÇ§Îäî ÎÇòÏ§ëÏóê ÏÑ§Ï†ï ÌôîÎ©¥ÏóêÏÑú ÏûÖÎ†•Î∞õÏùÑ ÏòàÏ†ï
    @Published var apiKey: String = ""
    @Published var isConfigured: Bool = false
    
    // MARK: - Initialization
    
    init() {
        setupJSONCoders()
        loadAPIKey()
    }
    
    private func setupJSONCoders() {
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'"
        
        decoder.dateDecodingStrategy = .formatted(dateFormatter)
        encoder.dateEncodingStrategy = .formatted(dateFormatter)
    }
    
    // MARK: - API Key Management
    
    func setAPIKey(_ key: String) {
        apiKey = key.trimmingCharacters(in: .whitespacesAndNewlines)
        isConfigured = !apiKey.isEmpty
        saveAPIKey()
        print("üîç [ClaudeAPIService] API ÌÇ§ ÏÑ§Ï†ï: \(isConfigured ? "ÏôÑÎ£å" : "Ï†úÍ±∞")")
    }
    
    private func saveAPIKey() {
        // Ïã§Ï†ú Ïï±ÏóêÏÑúÎäî KeychainÏóê Ï†ÄÏû•Ìï¥Ïïº ÌïòÏßÄÎßå, 
        // Í∞úÎ∞ú Îã®Í≥ÑÏóêÏÑúÎäî UserDefaults ÏÇ¨Ïö©
        UserDefaults.standard.set(apiKey, forKey: "claude_api_key")
    }
    
    private func loadAPIKey() {
        apiKey = UserDefaults.standard.string(forKey: "claude_api_key") ?? ""
        isConfigured = !apiKey.isEmpty
    }
    
    // MARK: - Main Summary Generation
    
    func generateCardNewsSummary(
        from document: ProcessedDocument,
        config: SummaryConfig
    ) async throws -> SummaryResult {
        
        guard isConfigured else {
            throw ClaudeAPIError.invalidAPIKey
        }
        
        print("üîç [ClaudeAPIService] Ïπ¥ÎìúÎâ¥Ïä§ ÏöîÏïΩ ÏÉùÏÑ± ÏãúÏûë")
        print("üìÑ Î¨∏ÏÑú: \(document.originalDocument.fileName)")
        print("‚öôÔ∏è ÏÑ§Ï†ï: \(config.cardCount.displayName), \(config.outputStyle.displayName)")
        
        // 1. ÌîÑÎ°¨ÌîÑÌä∏ ÏÉùÏÑ±
        let prompt = generateSummaryPrompt(document: document, config: config)
        
        // 2. Claude API Ìò∏Ï∂ú
        let response = try await callClaudeAPI(prompt: prompt, config: config)
        
        // 3. ÏùëÎãµ ÌååÏã± Î∞è Ïπ¥Îìú ÏÉùÏÑ±
        let cards = try parseCardsFromResponse(response.content.first?.text ?? "", config: config)
        
        // 4. Í≤∞Í≥º ÏÉùÏÑ±
        let result = SummaryResult(
            id: UUID().uuidString,
            config: config,
            originalDocument: document.originalDocument,
            cards: cards,
            createdAt: Date(),
            tokensUsed: response.usage.inputTokens + response.usage.outputTokens
        )
        
        print("üéâ [ClaudeAPIService] Ïπ¥ÎìúÎâ¥Ïä§ ÏÉùÏÑ± ÏôÑÎ£å: \(cards.count)Ïû•")
        return result
    }
    
    // MARK: - Prompt Generation
    
    private func generateSummaryPrompt(document: ProcessedDocument, config: SummaryConfig) -> String {
        let systemPrompt = generateSystemPrompt(config: config)
        let contentPrompt = generateContentPrompt(document: document, config: config)
        
        return """
        \(systemPrompt)
        
        \(contentPrompt)
        """
    }
    
    private func generateSystemPrompt(config: SummaryConfig) -> String {
        let languageInstruction = generateLanguageInstruction(config.language)
        let styleInstruction = generateStyleInstruction(config.outputStyle)
        let toneInstruction = generateToneInstruction(config.tone)
        
        return """
        ÎãπÏã†ÏùÄ Ï†ÑÎ¨∏Ï†ÅÏù∏ Ïπ¥ÎìúÎâ¥Ïä§ Ï†úÏûë Ï†ÑÎ¨∏Í∞ÄÏûÖÎãàÎã§. Î≥µÏû°Ìïú Î¨∏ÏÑúÎ•º \(config.cardCount.rawValue)Ïû•Ïùò Ïπ¥ÎìúÎâ¥Ïä§Î°ú ÏöîÏïΩÌïòÎäî Í≤ÉÏù¥ ÎãπÏã†Ïùò ÏûÑÎ¨¥ÏûÖÎãàÎã§.
        
        ## Í∏∞Î≥∏ ÏõêÏπô:
        1. Ï†ïÌôïÌûà \(config.cardCount.rawValue)Ïû•Ïùò Ïπ¥ÎìúÎ°ú Íµ¨ÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî
        2. Í∞Å Ïπ¥ÎìúÎäî ÎèÖÎ¶ΩÏ†ÅÏúºÎ°ú Ïù¥Ìï¥ Í∞ÄÎä•Ìï¥Ïïº Ìï©ÎãàÎã§
        3. Ï†ÑÏ≤¥Ï†ÅÏù∏ Ïä§ÌÜ†Î¶¨ ÌùêÎ¶ÑÏù¥ ÏûêÏó∞Ïä§Îü¨ÏõåÏïº Ìï©ÎãàÎã§
        4. ÌïµÏã¨ ÎÇ¥Ïö©ÏùÑ ÎÜìÏπòÏßÄ ÏïäÏúºÎ©¥ÏÑúÎèÑ ÏâΩÍ≤å Ïù¥Ìï¥Ìï† Ïàò ÏûàÍ≤å ÎßåÎì§Ïñ¥Ï£ºÏÑ∏Ïöî
        
        ## Ïñ∏Ïñ¥ ÏÑ§Ï†ï:
        \(languageInstruction)
        
        ## Ïä§ÌÉÄÏùº ÏÑ§Ï†ï:
        \(styleInstruction)
        
        ## ÌÜ§ ÏÑ§Ï†ï:
        \(toneInstruction)
        
        ## Ï∂úÎ†• ÌòïÏãù:
        Î∞òÎìúÏãú Îã§Ïùå JSON ÌòïÏãùÏúºÎ°ú ÏùëÎãµÌï¥Ï£ºÏÑ∏Ïöî:
        
        ```json
        {
          "cards": [
            {
              "cardNumber": 1,
              "title": "Ïπ¥Îìú Ï†úÎ™©",
              "content": "Ïπ¥Îìú ÎÇ¥Ïö©",
              "imagePrompt": "Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ±ÏùÑ ÏúÑÌïú ÌîÑÎ°¨ÌîÑÌä∏ (ÏÑ†ÌÉùÏÇ¨Ìï≠)",
              "backgroundColor": "#FFFFFF",
              "textColor": "#000000"
            }
          ]
        }
        ```
        """
    }
    
    private func generateLanguageInstruction(_ language: SummaryConfig.SummaryLanguage) -> String {
        switch language {
        case .korean:
            return "Î™®Îì† ÎÇ¥Ïö©ÏùÑ ÏûêÏó∞Ïä§Îü¨Ïö¥ ÌïúÍµ≠Ïñ¥Î°ú ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî. ÌïúÍµ≠ Î¨∏ÌôîÏôÄ Ï†ïÏÑúÏóê ÎßûÎäî ÌëúÌòÑÏùÑ ÏÇ¨Ïö©ÌïòÏÑ∏Ïöî."
        case .english:
            return "Write all content in natural English. Use expressions that fit English-speaking culture."
        case .japanese:
            return "„Åô„Åπ„Å¶„ÅÆÂÜÖÂÆπ„ÇíËá™ÁÑ∂„Å™Êó•Êú¨Ë™û„ÅßÊõ∏„ÅÑ„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇÊó•Êú¨„ÅÆÊñáÂåñ„ÇÑÊÉÖÁ∑í„Å´Âêà„Å£„ÅüË°®Áèæ„Çí‰ΩøÁî®„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
        }
    }
    
    private func generateStyleInstruction(_ style: SummaryConfig.OutputStyle) -> String {
        switch style {
        case .webtoon:
            return """
            ÏõπÌà∞ Ïä§ÌÉÄÏùºÎ°ú ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî:
            - ÎåÄÌôîÏ≤¥ÏôÄ Í∞êÏ†ï ÌëúÌòÑÏùÑ ÌôúÏö©ÌïòÏÑ∏Ïöî
            - Ï∫êÎ¶≠ÌÑ∞ÎÇò ÏÉÅÌô©ÏùÑ ÏùòÏù∏ÌôîÌï¥ÏÑú ÌëúÌòÑÌïòÏÑ∏Ïöî
            - Ïû¨ÎØ∏ÏûàÍ≥† ÏπúÍ∑ºÌïú ÌÜ§ÏùÑ Ïú†ÏßÄÌïòÏÑ∏Ïöî
            - ÎßêÌíçÏÑ†Ïù¥ÎÇò Ìö®Í≥ºÏùå Í∞ôÏùÄ ÏöîÏÜåÎ•º ÌÖçÏä§Ìä∏Î°ú ÌëúÌòÑÌïòÏÑ∏Ïöî
            """
        case .text:
            return """
            ÌÖçÏä§Ìä∏ ÏúÑÏ£º Ïä§ÌÉÄÏùºÎ°ú ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî:
            - ÌïµÏã¨ ÎÇ¥Ïö©ÏùÑ Í∞ÑÍ≤∞ÌïòÍ≥† Î™ÖÌôïÌïòÍ≤å Ï†ïÎ¶¨ÌïòÏÑ∏Ïöî
            - Î∂àÌïÑÏöîÌïú Ïû•ÏãùÏ†Å ÌëúÌòÑÏùÄ ÌîºÌïòÏÑ∏Ïöî
            - Ï†ïÎ≥¥ Ï†ÑÎã¨Ïóê ÏßëÏ§ëÌïòÏÑ∏Ïöî
            - ÎÖºÎ¶¨Ï†ÅÏù∏ Íµ¨Ï°∞Î°ú ÎÇ¥Ïö©ÏùÑ Î∞∞ÏπòÌïòÏÑ∏Ïöî
            """
        case .image:
            return """
            Ïù¥ÎØ∏ÏßÄ ÏúÑÏ£º Ïä§ÌÉÄÏùºÎ°ú ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî:
            - ÏãúÍ∞ÅÏ†ÅÏúºÎ°ú ÌëúÌòÑÌïòÍ∏∞ Ï¢ãÏùÄ ÌÇ§ÏõåÎìúÎ•º Í∞ïÏ°∞ÌïòÏÑ∏Ïöî
            - Í∞Å Ïπ¥ÎìúÎßàÎã§ ÏÉÅÏßïÏ†ÅÏù∏ Ïù¥ÎØ∏ÏßÄ ÌîÑÎ°¨ÌîÑÌä∏Î•º Ï†úÍ≥µÌïòÏÑ∏Ïöî
            - ÌÖçÏä§Ìä∏Îäî Í∞ÑÍ≤∞ÌïòÍ≤å, Ïù¥ÎØ∏ÏßÄÎ°ú Î≥¥ÏôÑÌï† Ïàò ÏûàÍ≤å Íµ¨ÏÑ±ÌïòÏÑ∏Ïöî
            - Ïù∏Ìè¨Í∑∏ÎûòÌîΩ Ïä§ÌÉÄÏùºÏùÑ ÏóºÎëêÏóê ÎëêÍ≥† ÏûëÏÑ±ÌïòÏÑ∏Ïöî
            """
        }
    }
    
    private func generateToneInstruction(_ tone: SummaryConfig.SummaryTone) -> String {
        switch tone {
        case .professional:
            return "Ï†ÑÎ¨∏Ï†ÅÏù¥Í≥† Ïã†Î¢∞Ìï† Ïàò ÏûàÎäî ÌÜ§ÏùÑ Ïú†ÏßÄÌïòÏÑ∏Ïöî. Ï†ïÌôïÌïú Ï†ïÎ≥¥ Ï†ÑÎã¨ÏùÑ Ïö∞ÏÑ†ÏãúÌïòÏÑ∏Ïöî."
        case .casual:
            return "Ìé∏ÏïàÌïòÍ≥† ÏπúÍ∑ºÌïú ÌÜ§ÏùÑ ÏÇ¨Ïö©ÌïòÏÑ∏Ïöî. ÏùºÏÉÅ ÎåÄÌôîÌïòÎìØ ÏûêÏó∞Ïä§ÎüΩÍ≤å ÌëúÌòÑÌïòÏÑ∏Ïöî."
        case .academic:
            return "ÌïôÏà†Ï†ÅÏù¥Í≥† Í∞ùÍ¥ÄÏ†ÅÏù∏ ÌÜ§ÏùÑ Ïú†ÏßÄÌïòÏÑ∏Ïöî. Í∑ºÍ±∞ÏôÄ ÎÖºÎ¶¨Î•º Ï§ëÏãúÌïòÏó¨ ÏÑ§Î™ÖÌïòÏÑ∏Ïöî."
        case .friendly:
            return "Îî∞ÎúªÌïòÍ≥† ÏπúÍµ¨ Í∞ôÏùÄ ÌÜ§ÏùÑ ÏÇ¨Ïö©ÌïòÏÑ∏Ïöî. ÎèÖÏûêÏôÄÏùò ÏπúÎ∞ÄÍ∞êÏùÑ ÌòïÏÑ±ÌïòÎ©∞ ÏÑ§Î™ÖÌïòÏÑ∏Ïöî."
        }
    }
    
    private func generateContentPrompt(document: ProcessedDocument, config: SummaryConfig) -> String {
        let contentPreview = document.content.prefix(3000) // ÌÜ†ÌÅ∞ Ï†úÌïú Í≥†Î†§
        
        return """
        ## ÏöîÏïΩÌï† Î¨∏ÏÑú:
        
        **ÌååÏùºÎ™Ö:** \(document.originalDocument.fileName)
        **Îã®Ïñ¥ Ïàò:** \(document.wordCount)Í∞ú
        **Î¨∏Ïûê Ïàò:** \(document.characterCount)Ïûê
        
        **ÎÇ¥Ïö©:**
        \(contentPreview)
        
        ÏúÑ Î¨∏ÏÑúÎ•º \(config.cardCount.rawValue)Ïû•Ïùò Ïπ¥ÎìúÎâ¥Ïä§Î°ú ÏöîÏïΩÌï¥Ï£ºÏÑ∏Ïöî.
        Í∞Å Ïπ¥ÎìúÍ∞Ä Ï†ÑÏ≤¥ Ïä§ÌÜ†Î¶¨Ïùò ÏùºÎ∂ÄÍ∞Ä ÎêòÎèÑÎ°ù ÎÖºÎ¶¨Ï†ÅÏúºÎ°ú Íµ¨ÏÑ±ÌïòÍ≥†, 
        ÎèÖÏûêÍ∞Ä ÏâΩÍ≤å Ïù¥Ìï¥ÌïòÍ≥† Í∏∞ÏñµÌï† Ïàò ÏûàÎèÑÎ°ù ÎßåÎì§Ïñ¥Ï£ºÏÑ∏Ïöî.
        """
    }
    
    // MARK: - Claude API Call
    
    private func callClaudeAPI(prompt: String, config: SummaryConfig) async throws -> ClaudeResponse {
        
        let url = URL(string: "\(ClaudeAPIConfig.baseURL)/messages")!
        
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.setValue(apiKey, forHTTPHeaderField: "x-api-key")
        request.setValue(ClaudeAPIConfig.version, forHTTPHeaderField: "anthropic-version")
        
        let claudeRequest = ClaudeRequest(
            model: ClaudeAPIConfig.model,
            maxTokens: ClaudeAPIConfig.defaultMaxTokens,
            messages: [
                ClaudeMessage(role: "user", content: prompt)
            ],
            system: nil
        )
        
        do {
            request.httpBody = try encoder.encode(claudeRequest)
            
            let (data, response) = try await session.data(for: request)
            
            guard let httpResponse = response as? HTTPURLResponse else {
                throw ClaudeAPIError.networkError(URLError(.badServerResponse))
            }
            
            print("üîç [ClaudeAPIService] HTTP ÏùëÎãµ ÏΩîÎìú: \(httpResponse.statusCode)")
            
            if httpResponse.statusCode == 200 {
                do {
                    let claudeResponse = try decoder.decode(ClaudeResponse.self, from: data)
                    print("üéâ [ClaudeAPIService] API Ìò∏Ï∂ú ÏÑ±Í≥µ - ÌÜ†ÌÅ∞ ÏÇ¨Ïö©: \(claudeResponse.usage.inputTokens + claudeResponse.usage.outputTokens)")
                    return claudeResponse
                } catch {
                    print("‚ùå [ClaudeAPIService] ÏùëÎãµ ÌååÏã± Ïã§Ìå®: \(error)")
                    throw ClaudeAPIError.decodingError(error)
                }
            } else {
                // ÏóêÎü¨ ÏùëÎãµ Ï≤òÎ¶¨
                if let errorResponse = try? decoder.decode(ClaudeErrorResponse.self, from: data) {
                    print("‚ùå [ClaudeAPIService] API ÏóêÎü¨: \(errorResponse.error.message)")
                    throw mapAPIError(errorResponse.error, statusCode: httpResponse.statusCode)
                } else {
                    throw ClaudeAPIError.serverError(httpResponse.statusCode)
                }
            }
            
        } catch let error as ClaudeAPIError {
            throw error
        } catch {
            print("‚ùå [ClaudeAPIService] ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò: \(error)")
            throw ClaudeAPIError.networkError(error)
        }
    }
    
    // MARK: - Response Parsing
    
    private func parseCardsFromResponse(_ responseText: String, config: SummaryConfig) throws -> [SummaryResult.CardContent] {
        print("üîç [ClaudeAPIService] ÏùëÎãµ ÌååÏã± ÏãúÏûë")
        
        // JSON Î∏îÎ°ù Ï∂îÏ∂ú
        guard let jsonRange = responseText.range(of: "```json\\s*\\n(.+?)\\n```", options: .regularExpression) else {
            throw ClaudeAPIError.decodingError(NSError(domain: "JSONParsingError", code: 1, userInfo: [NSLocalizedDescriptionKey: "JSON ÌòïÏãùÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."]))
        }
        
        let jsonText = String(responseText[jsonRange])
            .replacingOccurrences(of: "```json", with: "")
            .replacingOccurrences(of: "```", with: "")
            .trimmingCharacters(in: .whitespacesAndNewlines)
        
        guard let jsonData = jsonText.data(using: .utf8) else {
            throw ClaudeAPIError.decodingError(NSError(domain: "JSONParsingError", code: 2, userInfo: [NSLocalizedDescriptionKey: "JSON Îç∞Ïù¥ÌÑ∞ Î≥ÄÌôò Ïã§Ìå®"]))
        }
        
        do {
            let parsedResponse = try JSONSerialization.jsonObject(with: jsonData) as? [String: Any]
            guard let cardsArray = parsedResponse?["cards"] as? [[String: Any]] else {
                throw ClaudeAPIError.decodingError(NSError(domain: "JSONParsingError", code: 3, userInfo: [NSLocalizedDescriptionKey: "cards Î∞∞Ïó¥ÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."]))
            }
            
            let cards = cardsArray.compactMap { cardDict -> SummaryResult.CardContent? in
                guard let cardNumber = cardDict["cardNumber"] as? Int,
                      let title = cardDict["title"] as? String,
                      let content = cardDict["content"] as? String else {
                    return nil
                }
                
                return SummaryResult.CardContent(
                    cardNumber: cardNumber,
                    title: title,
                    content: content,
                    imagePrompt: cardDict["imagePrompt"] as? String,
                    backgroundColor: cardDict["backgroundColor"] as? String ?? "#FFFFFF",
                    textColor: cardDict["textColor"] as? String ?? "#000000"
                )
            }
            
            print("üéâ [ClaudeAPIService] \(cards.count)Ïû•Ïùò Ïπ¥Îìú ÌååÏã± ÏôÑÎ£å")
            return cards
            
        } catch {
            print("‚ùå [ClaudeAPIService] JSON ÌååÏã± Ïã§Ìå®: \(error)")
            throw ClaudeAPIError.decodingError(error)
        }
    }
    
    // MARK: - Error Mapping
    
    private func mapAPIError(_ error: ClaudeError, statusCode: Int) -> ClaudeAPIError {
        switch statusCode {
        case 401:
            return .invalidAPIKey
        case 400:
            return .invalidRequest
        case 429:
            return .rateLimitExceeded
        case 402:
            return .insufficientCredits
        default:
            return .serverError(statusCode)
        }
    }
    
    // MARK: - Utility Methods
    
    func validateConfiguration() -> Bool {
        return isConfigured && !apiKey.isEmpty
    }
    
    func estimateTokens(for text: String) -> Int {
        // ÎåÄÎûµÏ†ÅÏù∏ ÌÜ†ÌÅ∞ Í≥ÑÏÇ∞ (1ÌÜ†ÌÅ∞ ‚âà 4Í∏ÄÏûê)
        return text.count / 4
    }
}

import SwiftUI

struct PaywallView: View {
    @Environment(\.dismiss) private var dismiss
    @StateObject private var usageService = UsageTrackingService()
    @State private var selectedTier: SubscriptionTier = .pro
    @State private var showingPurchase = false
    @State private var isProcessingPurchase = false
    
    let triggerReason: PaywallTrigger
    
    init(triggerReason: PaywallTrigger = .freeUsageExhausted) {
        self.triggerReason = triggerReason
    }
    
    var body: some View {
        NavigationStack {
            ScrollView {
                VStack(spacing: 32) {
                    // Ìó§Îçî ÏÑπÏÖò
                    headerSection
                    
                    // ÌòúÌÉù ÏöîÏïΩ
                    benefitsSection
                    
                    // Íµ¨ÎèÖ ÌîåÎûú ÏÑ†ÌÉù
                    subscriptionPlansSection
                    
                    // Íµ¨ÎèÖ Î≤ÑÌäº
                    subscribeButton
                    
                    // Î¨¥Î£å Ï≤¥Ìóò Ï†ïÎ≥¥ (Ìï¥ÎãπÌïòÎäî Í≤ΩÏö∞)
                    if triggerReason == .freeUsageExhausted {
                        freeTrialInfoSection
                    }
                    
                    // ÌïòÎã® Ï†ïÎ≥¥
                    footerSection
                    
                    // ÌïòÎã® Ïó¨Î∞±
                    Color.clear.frame(height: 50)
                }
                .padding()
            }
            .navigationTitle("ÌîÑÎ¶¨ÎØ∏ÏóÑ ÏóÖÍ∑∏Î†àÏù¥Îìú")
            .navigationBarTitleDisplayMode(.large)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("ÎÇòÏ§ëÏóê") {
                        dismiss()
                    }
                    .foregroundColor(.secondary)
                }
            }
            .onAppear {
                print("üí∞ [PaywallView] Í≤∞Ï†ú ÌôîÎ©¥ ÌëúÏãú, Ìä∏Î¶¨Í±∞: \(triggerReason)")
            }
        }
    }
    
    // MARK: - Header Section
    private var headerSection: some View {
        VStack(spacing: 16) {
            // ÏïÑÏù¥ÏΩò
            Image(systemName: getHeaderIcon())
                .font(.system(size: 60))
                .foregroundColor(.blue)
            
            // Ï†úÎ™© Î∞è ÏÑ§Î™Ö
            VStack(spacing: 8) {
                Text(getHeaderTitle())
                    .font(.title)
                    .fontWeight(.bold)
                    .multilineTextAlignment(.center)
                
                Text(getHeaderDescription())
                    .font(.body)
                    .foregroundColor(.secondary)
                    .multilineTextAlignment(.center)
            }
        }
    }
    
    // MARK: - Benefits Section
    private var benefitsSection: some View {
        VStack(alignment: .leading, spacing: 16) {
            Text("ÌîÑÎ¶¨ÎØ∏ÏóÑÏùò ÌòúÌÉù")
                .font(.headline)
                .frame(maxWidth: .infinity, alignment: .leading)
            
            LazyVGrid(columns: [
                GridItem(.flexible()),
                GridItem(.flexible())
            ], spacing: 16) {
                benefitCard(
                    icon: "rectangle.3.group.fill",
                    title: "Î¨¥Ï†úÌïú Ïπ¥ÎìúÎâ¥Ïä§",
                    description: "ÏõêÌïòÎäî ÎßåÌÅº ÏÉùÏÑ±ÌïòÏÑ∏Ïöî"
                )
                
                benefitCard(
                    icon: "photo.fill",
                    title: "AI Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ±",
                    description: "Í≥†ÌíàÏßà Ïù¥ÎØ∏ÏßÄ ÏûêÎèô ÏÉùÏÑ±"
                )
                
                benefitCard(
                    icon: "paintbrush.pointed.fill",
                    title: "Í≥†Í∏â Ïä§ÌÉÄÏùº",
                    description: "ÌîÑÎ¶¨ÎØ∏ÏóÑ ÎîîÏûêÏù∏ ÌÖúÌîåÎ¶ø"
                )
                
                benefitCard(
                    icon: "doc.fill",
                    title: "PDF ÎÇ¥Î≥¥ÎÇ¥Í∏∞",
                    description: "Í≥†Ìï¥ÏÉÅÎèÑ PDF Ï†ÄÏû•"
                )
                
                benefitCard(
                    icon: "clock.fill",
                    title: "Ïö∞ÏÑ† Ï≤òÎ¶¨",
                    description: "Îπ†Î•∏ ÏÉùÏÑ± ÏÜçÎèÑ"
                )
                
                benefitCard(
                    icon: "headphones",
                    title: "ÌîÑÎ¶¨ÎØ∏ÏóÑ ÏßÄÏõê",
                    description: "24/7 Í≥†Í∞ù ÏßÄÏõê"
                )
            }
        }
    }
    
    // MARK: - Subscription Plans Section
    private var subscriptionPlansSection: some View {
        VStack(alignment: .leading, spacing: 16) {
            Text("ÌîåÎûú ÏÑ†ÌÉù")
                .font(.headline)
            
            VStack(spacing: 12) {
                ForEach([SubscriptionTier.basic, .pro, .premium], id: \.self) { tier in
                    subscriptionPlanCard(tier: tier)
                }
            }
        }
    }
    
    // MARK: - Subscribe Button
    private var subscribeButton: some View {
        VStack(spacing: 12) {
            Button(action: {
                handleSubscription()
            }) {
                HStack {
                    if isProcessingPurchase {
                        ProgressView()
                            .scaleEffect(0.8)
                            .foregroundColor(.white)
                    } else {
                        Image(systemName: "crown.fill")
                    }
                    Text(isProcessingPurchase ? "Ï≤òÎ¶¨ Ï§ë..." : "\\(selectedTier.monthlyPrice)/ÏõîÎ°ú ÏãúÏûëÌïòÍ∏∞")
                }
                .font(.headline)
                .foregroundColor(.white)
                .frame(maxWidth: .infinity)
                .padding()
                .background(
                    LinearGradient(
                        gradient: Gradient(colors: [.blue, .purple]),
                        startPoint: .leading,
                        endPoint: .trailing
                    )
                )
                .cornerRadius(12)
                .shadow(radius: 4)
            }
            .disabled(isProcessingPurchase)
            
            Text("Ïñ∏Ï†úÎì†ÏßÄ Ï∑®ÏÜå Í∞ÄÎä• ‚Ä¢ ÏûêÎèô Í∞±Ïã†")
                .font(.caption)
                .foregroundColor(.secondary)
        }
    }
    
    // MARK: - Free Trial Info Section
    private var freeTrialInfoSection: some View {
        VStack(spacing: 12) {
            HStack {
                Image(systemName: "info.circle.fill")
                    .foregroundColor(.orange)
                Text("Î¨¥Î£å Ï≤¥Ìóò ÏôÑÎ£å")
                    .font(.headline)
                    .foregroundColor(.orange)
                Spacer()
            }
            
            VStack(alignment: .leading, spacing: 8) {
                Text("‚Ä¢ 2Ìöå Î¨¥Î£å Ïπ¥ÎìúÎâ¥Ïä§ ÏÉùÏÑ±ÏùÑ Î™®Îëê ÏÇ¨Ïö©ÌïòÏÖ®ÏäµÎãàÎã§")
                Text("‚Ä¢ Í≥ÑÏÜç ÏÇ¨Ïö©ÌïòÎ†§Î©¥ ÌîÑÎ¶¨ÎØ∏ÏóÑ Íµ¨ÎèÖÏù¥ ÌïÑÏöîÌï©ÎãàÎã§")
                Text("‚Ä¢ Íµ¨ÎèÖ Ïãú Î∞îÎ°ú Î¨¥Ï†úÌïú Ïù¥Ïö© Í∞ÄÎä•Ìï©ÎãàÎã§")
            }
            .font(.subheadline)
            .foregroundColor(.secondary)
            .frame(maxWidth: .infinity, alignment: .leading)
        }
        .padding()
        .background(Color.orange.opacity(0.1))
        .cornerRadius(12)
    }
    
    // MARK: - Footer Section
    private var footerSection: some View {
        VStack(spacing: 8) {
            Text("Íµ¨ÎèÖÏùÑ ÌÜµÌï¥ Îçî ÎßéÏùÄ Í∏∞Îä•ÏùÑ Ïù¥Ïö©ÌïòÏÑ∏Ïöî")
                .font(.subheadline)
                .foregroundColor(.secondary)
                .multilineTextAlignment(.center)
            
            HStack(spacing: 16) {
                Link("Ïù¥Ïö©ÏïΩÍ¥Ä", destination: URL(string: "https://cardnews.app/terms")!)
                    .font(.caption)
                    .foregroundColor(.blue)
                
                Text("‚Ä¢")
                    .font(.caption)
                    .foregroundColor(.secondary)
                
                Link("Í∞úÏù∏Ï†ïÎ≥¥Ï≤òÎ¶¨Î∞©Ïπ®", destination: URL(string: "https://cardnews.app/privacy")!)
                    .font(.caption)
                    .foregroundColor(.blue)
                
                Text("‚Ä¢")
                    .font(.caption)
                    .foregroundColor(.secondary)
                
                Button("Î≥µÏõê") {
                    // TODO: Íµ¨Îß§ Î≥µÏõê Í∏∞Îä•
                    print("üí∞ [PaywallView] Íµ¨Îß§ Î≥µÏõê ÏöîÏ≤≠")
                }
                .font(.caption)
                .foregroundColor(.blue)
            }
        }
    }
    
    // MARK: - Helper Views
    
    private func benefitCard(icon: String, title: String, description: String) -> some View {
        VStack(spacing: 8) {
            Image(systemName: icon)
                .font(.title2)
                .foregroundColor(.blue)
            
            Text(title)
                .font(.subheadline)
                .fontWeight(.semibold)
            
            Text(description)
                .font(.caption)
                .foregroundColor(.secondary)
                .multilineTextAlignment(.center)
        }
        .padding()
        .background(Color(.systemGray6))
        .cornerRadius(12)
    }
    
    private func subscriptionPlanCard(tier: SubscriptionTier) -> some View {
        Button(action: {
            selectedTier = tier
            print("üí∞ [PaywallView] ÌîåÎûú ÏÑ†ÌÉù: \\(tier.displayName)")
        }) {
            HStack {
                VStack(alignment: .leading, spacing: 8) {
                    HStack {
                        Text(tier.displayName)
                            .font(.headline)
                            .fontWeight(.bold)
                        
                        if tier == .pro {
                            Text("Ïù∏Í∏∞")
                                .font(.caption)
                                .fontWeight(.bold)
                                .foregroundColor(.white)
                                .padding(.horizontal, 8)
                                .padding(.vertical, 2)
                                .background(Color.orange)
                                .cornerRadius(8)
                        }
                        
                        Spacer()
                    }
                    
                    Text(tier.monthlyPrice)
                        .font(.title2)
                        .fontWeight(.bold)
                        .foregroundColor(.blue)
                    
                    VStack(alignment: .leading, spacing: 4) {
                        Text("ÌÖçÏä§Ìä∏: \\(tier.textLimit)")
                            .font(.subheadline)
                        Text("Ïù¥ÎØ∏ÏßÄ: \\(tier.imageLimit)")
                            .font(.subheadline)
                    }
                    .foregroundColor(.secondary)
                }
                
                Spacer()
                
                Image(systemName: selectedTier == tier ? "checkmark.circle.fill" : "circle")
                    .font(.title2)
                    .foregroundColor(selectedTier == tier ? .blue : .gray)
            }
            .padding()
            .background(selectedTier == tier ? Color.blue.opacity(0.1) : Color(.systemGray6))
            .cornerRadius(12)
            .overlay(
                RoundedRectangle(cornerRadius: 12)
                    .stroke(selectedTier == tier ? Color.blue : Color.clear, lineWidth: 2)
            )
        }
        .buttonStyle(PlainButtonStyle())
    }
    
    // MARK: - Helper Methods
    
    private func getHeaderIcon() -> String {
        switch triggerReason {
        case .freeUsageExhausted:
            return "exclamationmark.triangle.fill"
        case .imageGenerationRequested:
            return "photo.artframe"
        case .upgradePrompt:
            return "crown.fill"
        }
    }
    
    private func getHeaderTitle() -> String {
        switch triggerReason {
        case .freeUsageExhausted:
            return "Î¨¥Î£å Ï≤¥Ìóò ÏôÑÎ£å"
        case .imageGenerationRequested:
            return "Ïù¥ÎØ∏ÏßÄ Ïπ¥ÎìúÎâ¥Ïä§Îäî\\nÌîÑÎ¶¨ÎØ∏ÏóÑ Í∏∞Îä•ÏûÖÎãàÎã§"
        case .upgradePrompt:
            return "Îçî ÎßéÏùÄ Í∏∞Îä•ÏùÑ\\nÏù¥Ïö©Ìï¥Î≥¥ÏÑ∏Ïöî"
        }
    }
    
    private func getHeaderDescription() -> String {
        switch triggerReason {
        case .freeUsageExhausted:
            return "2Ìöå Î¨¥Î£å ÏÉùÏÑ±ÏùÑ Î™®Îëê ÏÇ¨Ïö©ÌïòÏÖ®ÏäµÎãàÎã§.\\nÍ≥ÑÏÜç Ïù¥Ïö©ÌïòÎ†§Î©¥ ÌîÑÎ¶¨ÎØ∏ÏóÑ Íµ¨ÎèÖÏù¥ ÌïÑÏöîÌï©ÎãàÎã§."
        case .imageGenerationRequested:
            return "AIÍ∞Ä ÏÉùÏÑ±ÌïòÎäî Í≥†ÌíàÏßà Ïù¥ÎØ∏ÏßÄÎ°ú\\nÎçîÏö± ÏûÑÌå©Ìä∏ ÏûàÎäî Ïπ¥ÎìúÎâ¥Ïä§Î•º ÎßåÎì§Ïñ¥Î≥¥ÏÑ∏Ïöî."
        case .upgradePrompt:
            return "Î¨¥Ï†úÌïú ÏÉùÏÑ±, AI Ïù¥ÎØ∏ÏßÄ, Í≥†Í∏â Ïä§ÌÉÄÏùº Îì±\\nÌîÑÎ¶¨ÎØ∏ÏóÑ Í∏∞Îä•ÏùÑ Í≤ΩÌóòÌï¥Î≥¥ÏÑ∏Ïöî."
        }
    }
    
    private func handleSubscription() {
        print("üí∞ [PaywallView] Íµ¨ÎèÖ Ï≤òÎ¶¨ ÏãúÏûë: \\(selectedTier.displayName)")
        isProcessingPurchase = true
        
        // TODO: StoreKit 2 Íµ¨ÎèÖ Ï≤òÎ¶¨
        // ÌòÑÏû¨Îäî ÏãúÎÆ¨Î†àÏù¥ÏÖò
        DispatchQueue.main.asyncAfter(deadline: .now() + 2.0) {
            isProcessingPurchase = false
            
            // Íµ¨ÎèÖ ÏÑ±Í≥µ ÏãúÎÆ¨Î†àÏù¥ÏÖò
            usageService.updateSubscription(isActive: true, tier: selectedTier)
            
            // Íµ¨ÎèÖ ÏÑ±Í≥µ ÏïåÎ¶º
            NotificationCenter.default.post(name: .subscriptionStatusChanged, object: nil)
            
            print("‚úÖ [PaywallView] Íµ¨ÎèÖ ÏôÑÎ£å: \\(selectedTier.displayName)")
            dismiss()
        }
    }
}

// MARK: - Supporting Types

enum PaywallTrigger {
    case freeUsageExhausted    // Î¨¥Î£å ÏÇ¨Ïö©Îüâ ÏÜåÏßÑ
    case imageGenerationRequested  // Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± ÏöîÏ≤≠
    case upgradePrompt         // ÏóÖÍ∑∏Î†àÏù¥Îìú ÌîÑÎ°¨ÌîÑÌä∏
}

// MARK: - Preview

#Preview {
    PaywallView(triggerReason: .freeUsageExhausted)
}
